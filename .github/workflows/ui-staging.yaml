name: "Staging UI"
on:
  push:
    branches:
      # TODO: change to master
      - "main"
    paths: 
      - "the-ui/**"
jobs:
  announce:
    name: "Announce deployment"
    runs-on: "ubuntu-latest"
    outputs:
      deployment_id: ${{ steps.create_deployment.outputs.deployment_id }}
    steps:
    - uses: "actions/checkout@v3"
    - uses: "actions/github-script@v6"
      id: create_deployment
      with:
        script: |
          const { createInProgressDeployment } = require("./.github/workflows/js/deployments");
          const helpers = { github, context };
          const sha = ${{ toJSON(github.sha) }};

          const deploymentId = await createInProgressDeployment(helpers, {
            buildId: sha,
            sha: sha,
            envName: "staging",
            url: "https://management-staging.crdb.io",
          });

          core.setOutput("deployment_id", deploymentId);

  build:
    uses: "./.github/workflows/reusable--build-ui.yaml"
    with:
      the_build_id: ${{ github.sha }}
      build_type: "staging"

  upload:
    uses: "./.github/workflows/reusable--upload-build.yaml"
    needs: build
    with:
      the_build_id: ${{ github.sha }}
      build_type: "staging"

  finalize_deployment:
    name: "Finalize deployment status"
    runs-on: "ubuntu-latest"
    if: always()
    needs:
    - announce
    - build
    - upload
    steps:
    - uses: "actions/checkout@v3"
    - uses: "actions/github-script@v6"
      with:
        script: |
          const { finalizeDeployment } = require("./.github/workflows/js/deployments");
          const helpers = { github, context };
          const needsResults = ${{ toJSON(needs.*.result) }};
          const deploymentId = ${{ toJSON(needs.announce.outputs.deployment_id) }};
          const buildId = ${{ toJSON(github.sha) }}

          await finalizeDeployment(helpers, {
            deploymentId: deploymentId,
            buildId: buildId,
            needsResults: needsResults,
            url: "https://management-staging.crdb.io",
          });
