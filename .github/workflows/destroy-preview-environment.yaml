name: "Destroy Preview Deployments"
on:
  pull_request_target:
    branches:
      - "main"
    types: 
      - "closed"
    paths:
      - "the-ui/**"
jobs:
  debug:
    runs-on: "ubuntu-latest"
    steps:
    - env:
        EVENT_CONTEXT: ${{ toJSON(github.event) }}
      run: echo $EVENT_CONTEXT

  destroy_deployments:
    name: "Delete deployments"
    runs-on: "ubuntu-latest"
    steps:
    - name: "Delete deployments"
      uses: "actions/github-script@v6"
      env:
        PR_NUMBER: ${{ github.event.pull_request.number }}
      with:
        script: |
          const owner = context.repo.owner;
          const repo = context.repo.repo;
          ["staging", "prod"].forEach(async (cc_env) => {
            let deployments = github.rest.repos.listDeployments({
              owner: owner,
              repo: repo,
              environment: `PR #${process.env.THE_BUILD_ID} (${cc_env} backend)`,
            });

            console.log("DBG: deployments = ", deployments);

            deployments.data.forEach(async (deployment) => {
              await github.rest.repos.createDeploymentStatus({
                owner: owner,
                repo: repo,
                deployment_id: deployment.data.id,
                state: "inactive",
                auto_inactive: true
              });


              await github.rest.repos.deleteDeployment({
                owner: owner,
                repo: repo,
                deployment_id: deployment.data.id,
              });
            });
          });

      
        # script: |
        #   ["staging", "prod"].forEach(async (cc_env) => {
        #     await github.rest.repos.deleteAnEnvironment({
        #       owner: context.repo.owner,
        #       repo: context.repo.repo,
        #       environment_name: `PR #${process.env.PR_NUMBER} (${cc_env} backend)`,
        #     });
        #   });    
    
